1. List all employees who are managers.
SELECT e.employee_id, e.first_name, e.last_name, e.job_id, j.job_title
FROM Employees e
JOIN Jobs j ON e.job_id = j.job_id
WHERE j.job_title LIKE '%Manager%';

2. Find the total salary expenditure per department.
SELECT d.department_name, SUM(e.salary) AS total_salary_expenditure
FROM Employees e
JOIN Departments d ON e.department_id = d.department_id
GROUP BY d.department_name;

3. List the employees working on more than one project.
SELECT e.employee_id, e.first_name, e.last_name, COUNT(ep.project_id) AS project_count
FROM Employees e
JOIN EmployeesProjects ep ON e.employee_id = ep.employee_id
GROUP BY e.employee_id, e.first_name, e.last_name
HAVING COUNT(ep.project_id) > 1;

4. Find the projects that have not ended yet.
SELECT project_id, project_name, start_date, end_date
FROM Projects
WHERE end_date IS NULL OR end_date > CURRENT_DATE;

5. Identify the highest and lowest salaries for each job role.
SELECT j.job_title, MAX(e.salary) AS highest_salary, MIN(e.salary) AS lowest_salary
FROM Employees e
JOIN Jobs j ON e.job_id = j.job_id
GROUP BY j.job_title;

6. List all employees whose email address contains ‘company’.
SELECT employee_id, first_name, last_name, email
FROM Employees
WHERE email LIKE '%company%';

7. Find the total number of employees in each department.
SELECT d.department_name, COUNT(e.employee_id) AS total_employees
FROM Employees e
JOIN Departments d ON e.department_id = d.department_id
GROUP BY d.department_name;

8. Calculate the average salary for each department.
SELECT d.department_name, AVG(e.salary) AS average_salary
FROM Employees e
JOIN Departments d ON e.department_id = d.department_id
GROUP BY d.department_name;

9. List the employees who joined the company before 2020.
SELECT employee_id, first_name, last_name, hire_date
FROM Employees
WHERE hire_date < '2020-01-01';

10. Display the details of projects handled by IT department employees.
SELECT p.project_id, p.project_name, p.start_date, p.end_date, e.employee_id, e.first_name, e.last_name
FROM Projects p
JOIN EmployeesProjects ep ON p.project_id = ep.project_id
JOIN Employees e ON ep.employee_id = e.employee_id
JOIN Departments d ON e.department_id = d.department_id
WHERE d.department_name = 'IT';

11. Calculate the Top 3 Products by Revenue for Each Customer
WITH ranked_products AS (
  SELECT o.customer_id, od.product_id, SUM(od.quantity * p.price) AS total_revenue,
         ROW_NUMBER() OVER (PARTITION BY o.customer_id ORDER BY SUM(od.quantity * p.price) DESC) AS rank
  FROM orders_0 o
  JOIN order_details od ON o.order_id = od.order_id
  JOIN products p ON od.product_id = p.product_id
  GROUP BY o.customer_id, od.product_id
)
SELECT customer_id, product_id, total_revenue
FROM ranked_products
WHERE rank <= 3;

12. Identify Customers with No Orders in the Last 6 Months
SELECT c.customer_id, c.name
FROM customers c
LEFT JOIN orders_0 o ON c.customer_id = o.customer_id
WHERE o.order_date IS NULL OR o.order_date < DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);

13. Calculate the Average Order Value by Customer Segment
SELECT c.city AS segment_name, AVG(o.total_amount) AS average_order_value
FROM customers c
JOIN orders_0 o ON c.customer_id = o.customer_id
GROUP BY c.city;

14. Identify Top Customers by Order Value
SELECT c.customer_id, c.name, SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders_0 o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name
ORDER BY total_spent DESC
LIMIT 3;

15. Analyzing Customer Behavior Over Time
SELECT o.customer_id, COUNT(DISTINCT YEAR(o.order_date)) AS distinct_years
FROM orders_0 o
GROUP BY o.customer_id
HAVING COUNT(DISTINCT YEAR(o.order_date)) >= 3;

16. Correlate Product Categories with Order Volume
SELECT p.name AS product_name, AVG(od.quantity) AS average_quantity
FROM order_details od
JOIN products p ON od.product_id = p.product_id
GROUP BY p.name
ORDER BY average_quantity DESC
LIMIT 1;

17. Finding Frequent Customers and Their Orders
SELECT o.customer_id, MONTH(o.order_date) AS order_month, COUNT(o.order_id) AS order_count
FROM orders_0 o
GROUP BY o.customer_id, MONTH(o.order_date)
HAVING COUNT(o.order_id) > 5;

18. Track Customer Retention Rates
SELECT YEAR(o.order_date) AS year, 
       COUNT(DISTINCT CASE WHEN QUARTER(o.order_date) = 1 THEN o.customer_id END) AS customers_Q1,
       COUNT(DISTINCT CASE WHEN QUARTER(o.order_date) = 2 THEN o.customer_id END) AS customers_Q2,
       (COUNT(DISTINCT CASE WHEN QUARTER(o.order_date) = 2 THEN o.customer_id END) / 
        COUNT(DISTINCT CASE WHEN QUARTER(o.order_date) = 1 THEN o.customer_id END)) * 100 AS retention_rate
FROM orders_0 o
GROUP BY YEAR(o.order_date);

19. Identify Unusual Customer Behavior
WITH avg_orders_per_month AS (
  SELECT o.customer_id, AVG(COUNT(o.order_id)) OVER (PARTITION BY o.customer_id) AS avg_orders
  FROM orders_0 o
  GROUP BY o.customer_id, MONTH(o.order_date)
)
SELECT o.customer_id, MONTH(o.order_date) AS order_month, COUNT(o.order_id) AS order_count
FROM orders_0 o
JOIN avg_orders_per_month aopm ON o.customer_id = aopm.customer_id
GROUP BY o.customer_id, MONTH(o.order_date)
HAVING COUNT(o.order_id) > 2 * aopm.avg_orders;

20. Product Cross-Sell Analysis
SELECT od1.product_id AS product_id_1, od2.product_id AS product_id_2, COUNT(*) AS order_count
FROM order_details od1
JOIN order_details od2 ON od1.order_id = od2.order_id AND od1.product_id < od2.product_id
GROUP BY od1.product_id, od2.product_id
HAVING COUNT(*) >= 3;

21. Inventory Turnover Rate
SELECT i.product_id, SUM(od.quantity) / AVG(i.quantity_available) AS turnover_rate
FROM Inventory i
JOIN order_details od ON i.product_id = od.product_id
GROUP BY i.product_id
ORDER BY turnover_rate DESC;

22. Identify Most Consistent Products
SELECT od.product_id, STDDEV(COUNT(od.order_id)) OVER (PARTITION BY od.product_id) AS std_dev_orders
FROM order_details od
GROUP BY od.product_id
ORDER BY std_dev_orders ASC;

